// registersx86.rs
/* This is an autogenerated file, do not change */
#[derive(Debug)]
pub enum Registersx86 {
    NoRegister=0,
    AH=1,
    AL=2,
    AX=3,
    BH=4,
    BL=5,
    BP=6,
    BPL=7,
    BX=8,
    CH=9,
    CL=10,
    CS=11,
    CX=12,
    DH=13,
    DI=14,
    DIL=15,
    DL=16,
    DS=17,
    DX=18,
    EAX=19,
    EBP=20,
    EBX=21,
    ECX=22,
    EDI=23,
    EDX=24,
    EFLAGS=25,
    EIP=26,
    EIZ=27,
    ES=28,
    ESI=29,
    ESP=30,
    FPSW=31,
    FS=32,
    GS=33,
    IP=34,
    RAX=35,
    RBP=36,
    RBX=37,
    RCX=38,
    RDI=39,
    RDX=40,
    RIP=41,
    RIZ=42,
    RSI=43,
    RSP=44,
    SI=45,
    SIL=46,
    SP=47,
    SPL=48,
    SS=49,
    CR0=50,
    CR1=51,
    CR2=52,
    CR3=53,
    CR4=54,
    CR5=55,
    CR6=56,
    CR7=57,
    CR8=58,
    CR9=59,
    CR10=60,
    CR11=61,
    CR12=62,
    CR13=63,
    CR14=64,
    CR15=65,
    DR0=66,
    DR1=67,
    DR2=68,
    DR3=69,
    DR4=70,
    DR5=71,
    DR6=72,
    DR7=73,
    FP0=74,
    FP1=75,
    FP2=76,
    FP3=77,
    FP4=78,
    FP5=79,
    FP6=80,
    FP7=81,
    K0=82,
    K1=83,
    K2=84,
    K3=85,
    K4=86,
    K5=87,
    K6=88,
    K7=89,
    MM0=90,
    MM1=91,
    MM2=92,
    MM3=93,
    MM4=94,
    MM5=95,
    MM6=96,
    MM7=97,
    R8=98,
    R9=99,
    R10=100,
    R11=101,
    R12=102,
    R13=103,
    R14=104,
    R15=105,
    ST0=106,
    ST1=107,
    ST2=108,
    ST3=109,
    ST4=110,
    ST5=111,
    ST6=112,
    ST7=113,
    XMM0=114,
    XMM1=115,
    XMM2=116,
    XMM3=117,
    XMM4=118,
    XMM5=119,
    XMM6=120,
    XMM7=121,
    XMM8=122,
    XMM9=123,
    XMM10=124,
    XMM11=125,
    XMM12=126,
    XMM13=127,
    XMM14=128,
    XMM15=129,
    XMM16=130,
    XMM17=131,
    XMM18=132,
    XMM19=133,
    XMM20=134,
    XMM21=135,
    XMM22=136,
    XMM23=137,
    XMM24=138,
    XMM25=139,
    XMM26=140,
    XMM27=141,
    XMM28=142,
    XMM29=143,
    XMM30=144,
    XMM31=145,
    YMM0=146,
    YMM1=147,
    YMM2=148,
    YMM3=149,
    YMM4=150,
    YMM5=151,
    YMM6=152,
    YMM7=153,
    YMM8=154,
    YMM9=155,
    YMM10=156,
    YMM11=157,
    YMM12=158,
    YMM13=159,
    YMM14=160,
    YMM15=161,
    YMM16=162,
    YMM17=163,
    YMM18=164,
    YMM19=165,
    YMM20=166,
    YMM21=167,
    YMM22=168,
    YMM23=169,
    YMM24=170,
    YMM25=171,
    YMM26=172,
    YMM27=173,
    YMM28=174,
    YMM29=175,
    YMM30=176,
    YMM31=177,
    ZMM0=178,
    ZMM1=179,
    ZMM2=180,
    ZMM3=181,
    ZMM4=182,
    ZMM5=183,
    ZMM6=184,
    ZMM7=185,
    ZMM8=186,
    ZMM9=187,
    ZMM10=188,
    ZMM11=189,
    ZMM12=190,
    ZMM13=191,
    ZMM14=192,
    ZMM15=193,
    ZMM16=194,
    ZMM17=195,
    ZMM18=196,
    ZMM19=197,
    ZMM20=198,
    ZMM21=199,
    ZMM22=200,
    ZMM23=201,
    ZMM24=202,
    ZMM25=203,
    ZMM26=204,
    ZMM27=205,
    ZMM28=206,
    ZMM29=207,
    ZMM30=208,
    ZMM31=209,
    R8B=210,
    R9B=211,
    R10B=212,
    R11B=213,
    R12B=214,
    R13B=215,
    R14B=216,
    R15B=217,
    R8D=218,
    R9D=219,
    R10D=220,
    R11D=221,
    R12D=222,
    R13D=223,
    R14D=224,
    R15D=225,
    R8W=226,
    R9W=227,
    R10W=228,
    R11W=229,
    R12W=230,
    R13W=231,
    R14W=232,
    R15W=233,
}

pub enum RegisterClassesx86 {
    GR8RegClassID=0,
    GR8NOREXRegClassID=1,
    GR8ABCDHRegClassID=2,
    GR8ABCDLRegClassID=3,
    GR16RegClassID=4,
    GR16NOREXRegClassID=5,
    VK1RegClassID=6,
    VK16RegClassID=7,
    VK2RegClassID=8,
    VK4RegClassID=9,
    VK8RegClassID=10,
    VK16WMRegClassID=11,
    VK1WMRegClassID=12,
    VK2WMRegClassID=13,
    VK4WMRegClassID=14,
    VK8WMRegClassID=15,
    SEGMENTREGRegClassID=16,
    GR16ABCDRegClassID=17,
    FPCCRRegClassID=18,
    FR32XRegClassID=19,
    FR32RegClassID=20,
    GR32RegClassID=21,
    GR32NOAXRegClassID=22,
    GR32NOSPRegClassID=23,
    GR32NOAXandGR32NOSPRegClassID=24,
    DEBUGREGRegClassID=25,
    GR32NOREXRegClassID=26,
    VK32RegClassID=27,
    GR32NOAXandGR32NOREXRegClassID=28,
    GR32NOREXNOSPRegClassID=29,
    RFP32RegClassID=30,
    VK32WMRegClassID=31,
    GR32NOAXandGR32NOREXNOSPRegClassID=32,
    GR32ABCDRegClassID=33,
    GR32ABCDandGR32NOAXRegClassID=34,
    GR32TCRegClassID=35,
    GR32ADRegClassID=36,
    GR32NOAXandGR32TCRegClassID=37,
    CCRRegClassID=38,
    GR32ADandGR32NOAXRegClassID=39,
    RFP64RegClassID=40,
    FR64XRegClassID=41,
    GR64RegClassID=42,
    CONTROLREGRegClassID=43,
    FR64RegClassID=44,
    GR64withsub8bitRegClassID=45,
    GR64NOSPRegClassID=46,
    GR64withsub32bitinGR32NOAXRegClassID=47,
    GR64withsub32bitinGR32NOAXandGR32NOSPRegClassID=48,
    GR64NOREXRegClassID=49,
    GR64TCRegClassID=50,
    GR64NOSPandGR64TCRegClassID=51,
    GR64withsub16bitinGR16NOREXRegClassID=52,
    VK64RegClassID=53,
    VR64RegClassID=54,
    GR64NOREXNOSPRegClassID=55,
    GR64TCandGR64withsub32bitinGR32NOAXRegClassID=56,
    GR64withsub32bitinGR32NOAXandGR32NOREXRegClassID=57,
    VK64WMRegClassID=58,
    GR64NOREXandGR64TCRegClassID=59,
    GR64TCW64RegClassID=60,
    GR64withsub32bitinGR32NOAXandGR32NOREXNOSPRegClassID=61,
    GR64NOREXNOSPandGR64TCRegClassID=62,
    GR64TCW64andGR64withsub32bitinGR32NOAXRegClassID=63,
    GR64ABCDRegClassID=64,
    GR64TCandGR64withsub32bitinGR32NOAXandGR32NOREXRegClassID=65,
    GR64withsub32bitinGR32ABCDandGR32NOAXRegClassID=66,
    GR64withsub32bitinGR32TCRegClassID=67,
    GR64withsub32bitinGR32ADRegClassID=68,
    GR64withsub32bitinGR32NOAXandGR32TCRegClassID=69,
    GR64withsub32bitinGR32ADandGR32NOAXRegClassID=70,
    RSTRegClassID=71,
    RFP80RegClassID=72,
    VR128XRegClassID=73,
    VR128RegClassID=74,
    VR256XRegClassID=75,
    VR256RegClassID=76,
    VR512RegClassID=77,
    VR512withsubxmminFR32RegClassID=78,
}

pub const REG_DESCRIPTORSX86: [[u32; 5]; 234] = [
    [5,0,0,0,0],
    [812,2,90,3,2273],
    [840,2,86,3,2273],
    [958,151,87,6,0],
    [815,2,78,3,2193],
    [843,2,74,3,2193],
    [869,1,83,2,544],
    [860,2,82,3,544],
    [966,141,75,6,48],
    [818,2,70,3,2081],
    [846,2,66,3,2081],
    [892,2,2,3,2081],
    [974,146,67,6,96],
    [821,2,58,3,2049],
    [825,1,63,2,624],
    [852,2,62,3,624],
    [849,2,54,3,2017],
    [895,2,2,3,2017],
    [982,134,55,6,496],
    [957,150,56,5,0],
    [868,24,56,1,544],
    [965,140,56,5,323],
    [973,145,56,5,323],
    [824,28,56,1,624],
    [981,133,56,5,496],
    [904,2,2,3,1985],
    [876,37,52,10,1985],
    [989,2,2,3,1985],
    [898,2,2,3,1985],
    [832,10,45,1,1985],
    [884,14,45,1,1985],
    [952,2,2,3,1985],
    [901,2,2,3,1985],
    [908,2,2,3,1985],
    [877,2,51,3,656],
    [961,149,2,4,0],
    [872,23,2,0,544],
    [969,139,2,4,275],
    [977,144,2,4,275],
    [828,27,2,0,624],
    [985,132,2,4,496],
    [880,36,2,9,1592],
    [993,2,2,3,1592],
    [836,9,2,0,1889],
    [888,13,2,0,1889],
    [833,1,48,2,896],
    [856,2,47,3,896],
    [885,1,44,2,1504],
    [864,2,43,3,1504],
    [911,2,2,3,1889],
    [81,2,2,3,1889],
    [174,2,2,3,1889],
    [249,2,2,3,1889],
    [324,2,2,3,1889],
    [399,2,2,3,1889],
    [474,2,2,3,1889],
    [544,2,2,3,1889],
    [614,2,2,3,1889],
    [677,2,2,3,1889],
    [732,2,2,3,1889],
    [18,2,2,3,1889],
    [111,2,2,3,1889],
    [204,2,2,3,1889],
    [279,2,2,3,1889],
    [354,2,2,3,1889],
    [429,2,2,3,1889],
    [85,2,2,3,1889],
    [178,2,2,3,1889],
    [253,2,2,3,1889],
    [328,2,2,3,1889],
    [403,2,2,3,1889],
    [478,2,2,3,1889],
    [548,2,2,3,1889],
    [618,2,2,3,1889],
    [77,2,2,3,1889],
    [170,2,2,3,1889],
    [245,2,2,3,1889],
    [320,2,2,3,1889],
    [395,2,2,3,1889],
    [470,2,2,3,1889],
    [540,2,2,3,1889],
    [610,2,2,3,1889],
    [59,2,2,3,1889],
    [152,2,2,3,1889],
    [227,2,2,3,1889],
    [302,2,2,3,1889],
    [377,2,2,3,1889],
    [452,2,2,3,1889],
    [522,2,2,3,1889],
    [592,2,2,3,1889],
    [63,2,2,3,1889],
    [156,2,2,3,1889],
    [231,2,2,3,1889],
    [306,2,2,3,1889],
    [381,2,2,3,1889],
    [456,2,2,3,1889],
    [526,2,2,3,1889],
    [596,2,2,3,1889],
    [678,120,2,0,1889],
    [733,120,2,0,1889],
    [19,120,2,0,1889],
    [112,120,2,0,1889],
    [205,120,2,0,1889],
    [280,120,2,0,1889],
    [355,120,2,0,1889],
    [430,120,2,0,1889],
    [89,2,2,3,1889],
    [182,2,2,3,1889],
    [257,2,2,3,1889],
    [332,2,2,3,1889],
    [407,2,2,3,1889],
    [482,2,2,3,1889],
    [552,2,2,3,1889],
    [622,2,2,3,1889],
    [62,2,96,3,1889],
    [155,2,96,3,1889],
    [230,2,96,3,1889],
    [305,2,96,3,1889],
    [380,2,96,3,1889],
    [455,2,96,3,1889],
    [525,2,96,3,1889],
    [595,2,96,3,1889],
    [662,2,96,3,1889],
    [717,2,96,3,1889],
    [0,2,96,3,1889],
    [93,2,96,3,1889],
    [186,2,96,3,1889],
    [261,2,96,3,1889],
    [336,2,96,3,1889],
    [411,2,96,3,1889],
    [486,2,96,3,1889],
    [556,2,96,3,1889],
    [626,2,96,3,1889],
    [681,2,96,3,1889],
    [23,2,96,3,1889],
    [116,2,96,3,1889],
    [209,2,96,3,1889],
    [284,2,96,3,1889],
    [359,2,96,3,1889],
    [434,2,96,3,1889],
    [504,2,96,3,1889],
    [574,2,96,3,1889],
    [644,2,96,3,1889],
    [699,2,96,3,1889],
    [41,2,96,3,1889],
    [134,2,96,3,1889],
    [67,116,97,13,1809],
    [160,116,97,13,1809],
    [235,116,97,13,1809],
    [310,116,97,13,1809],
    [385,116,97,13,1809],
    [460,116,97,13,1809],
    [530,116,97,13,1809],
    [600,116,97,13,1809],
    [667,116,97,13,1809],
    [722,116,97,13,1809],
    [6,116,97,13,1809],
    [99,116,97,13,1809],
    [192,116,97,13,1809],
    [267,116,97,13,1809],
    [342,116,97,13,1809],
    [417,116,97,13,1809],
    [492,116,97,13,1809],
    [562,116,97,13,1809],
    [632,116,97,13,1809],
    [687,116,97,13,1809],
    [29,116,97,13,1809],
    [122,116,97,13,1809],
    [215,116,97,13,1809],
    [290,116,97,13,1809],
    [365,116,97,13,1809],
    [440,116,97,13,1809],
    [510,116,97,13,1809],
    [580,116,97,13,1809],
    [650,116,97,13,1809],
    [705,116,97,13,1809],
    [47,116,97,13,1809],
    [140,116,97,13,1809],
    [72,115,2,12,1777],
    [165,115,2,12,1777],
    [240,115,2,12,1777],
    [315,115,2,12,1777],
    [390,115,2,12,1777],
    [465,115,2,12,1777],
    [535,115,2,12,1777],
    [605,115,2,12,1777],
    [672,115,2,12,1777],
    [727,115,2,12,1777],
    [12,115,2,12,1777],
    [105,115,2,12,1777],
    [198,115,2,12,1777],
    [273,115,2,12,1777],
    [348,115,2,12,1777],
    [423,115,2,12,1777],
    [498,115,2,12,1777],
    [568,115,2,12,1777],
    [638,115,2,12,1777],
    [693,115,2,12,1777],
    [35,115,2,12,1777],
    [128,115,2,12,1777],
    [221,115,2,12,1777],
    [296,115,2,12,1777],
    [371,115,2,12,1777],
    [446,115,2,12,1777],
    [516,115,2,12,1777],
    [586,115,2,12,1777],
    [656,115,2,12,1777],
    [711,115,2,12,1777],
    [53,115,2,12,1777],
    [146,115,2,12,1777],
    [766,2,107,3,1681],
    [770,2,107,3,1681],
    [736,2,107,3,1681],
    [741,2,107,3,1681],
    [746,2,107,3,1681],
    [751,2,107,3,1681],
    [756,2,107,3,1681],
    [761,2,107,3,1681],
    [804,121,109,1,1649],
    [808,121,109,1,1649],
    [774,121,109,1,1649],
    [779,121,109,1,1649],
    [784,121,109,1,1649],
    [789,121,109,1,1649],
    [794,121,109,1,1649],
    [799,121,109,1,1649],
    [944,122,108,2,1617],
    [948,122,108,2,1617],
    [914,122,108,2,1617],
    [919,122,108,2,1617],
    [924,122,108,2,1617],
    [929,122,108,2,1617],
    [934,122,108,2,1617],
    [939,122,108,2,1617],
];

pub struct RegClassx86<'a>{
    pub reg_bits: &'a [i32],
    pub regs_size: i32,
    pub reg_size: i32,
    pub alignment: i32,
    pub copy_cost: i32,
    pub allocatable: i32,
    pub register_list: &'a [i32],
}

pub const REGCLASS_DESCRIPTORSX86: [RegClassx86; 79] = [
    RegClassx86 {
        reg_bits: &[182,166,1,0,0,64,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,3],
        regs_size: 20,
        reg_size: 1,
        alignment: 1,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[2,10,16,1,9,13,5,4,46,15,7,48,210,211,212,213,216,217,214,215],
    },
    RegClassx86 {
        reg_bits: &[54,38,1],
        regs_size: 8,
        reg_size: 1,
        alignment: 1,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[2,10,1,9,13,5,4],
    },
    RegClassx86 {
        reg_bits: &[18,34],
        regs_size: 4,
        reg_size: 1,
        alignment: 1,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[1,9,4],
    },
    RegClassx86 {
        reg_bits: &[36,4,1],
        regs_size: 4,
        reg_size: 1,
        alignment: 1,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[2,10,5],
    },
    RegClassx86 {
        reg_bits: &[72,81,4,0,0,160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,3],
        regs_size: 16,
        reg_size: 2,
        alignment: 2,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[3,12,45,14,8,6,47,226,227,228,229,232,233,230,231],
    },
    RegClassx86 {
        reg_bits: &[72,81,4,0,0,160],
        regs_size: 8,
        reg_size: 2,
        alignment: 2,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[3,12,45,14,8,6,47],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,0,0,0,0,0,0,252,3],
        regs_size: 8,
        reg_size: 2,
        alignment: 2,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[82,83,85,86,87,88,89],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,0,0,0,0,0,0,252,3],
        regs_size: 8,
        reg_size: 2,
        alignment: 2,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[82,83,85,86,87,88,89],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,0,0,0,0,0,0,252,3],
        regs_size: 8,
        reg_size: 2,
        alignment: 2,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[82,83,85,86,87,88,89],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,0,0,0,0,0,0,252,3],
        regs_size: 8,
        reg_size: 2,
        alignment: 2,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[82,83,85,86,87,88,89],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,0,0,0,0,0,0,252,3],
        regs_size: 8,
        reg_size: 2,
        alignment: 2,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[82,83,85,86,87,88,89],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,0,0,0,0,0,0,248,3],
        regs_size: 7,
        reg_size: 2,
        alignment: 2,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[83,84,86,87,88,89],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,0,0,0,0,0,0,248,3],
        regs_size: 7,
        reg_size: 2,
        alignment: 2,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[83,84,86,87,88,89],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,0,0,0,0,0,0,248,3],
        regs_size: 7,
        reg_size: 2,
        alignment: 2,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[83,84,86,87,88,89],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,0,0,0,0,0,0,248,3],
        regs_size: 7,
        reg_size: 2,
        alignment: 2,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[83,84,86,87,88,89],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,0,0,0,0,0,0,248,3],
        regs_size: 7,
        reg_size: 2,
        alignment: 2,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[83,84,86,87,88,89],
    },
    RegClassx86 {
        reg_bits: &[0,8,2,16,3,0,2],
        regs_size: 6,
        reg_size: 2,
        alignment: 2,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[11,17,28,32,33],
    },
    RegClassx86 {
        reg_bits: &[8,17,4],
        regs_size: 4,
        reg_size: 2,
        alignment: 2,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[3,12,8],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,128],
        regs_size: 1,
        reg_size: 2,
        alignment: 2,
        copy_cost: -1,
        allocatable: 0,
        register_list: &[31],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,3],
        regs_size: 32,
        reg_size: 4,
        alignment: 4,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[114,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,3],
        regs_size: 16,
        reg_size: 4,
        alignment: 4,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[114,115,117,118,119,120,121,122,123,124,125,126,127,128,129],
    },
    RegClassx86 {
        reg_bits: &[0,0,248,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,3],
        regs_size: 16,
        reg_size: 4,
        alignment: 4,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[19,22,29,23,21,20,30,218,219,220,221,224,225,222,223],
    },
    RegClassx86 {
        reg_bits: &[0,0,240,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,3],
        regs_size: 15,
        reg_size: 4,
        alignment: 4,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[22,24,23,21,20,30,218,219,220,221,224,225,222,223],
    },
    RegClassx86 {
        reg_bits: &[0,0,248,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,3],
        regs_size: 15,
        reg_size: 4,
        alignment: 4,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[19,22,29,23,21,20,218,219,220,221,224,225,222,223],
    },
    RegClassx86 {
        reg_bits: &[0,0,240,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,3],
        regs_size: 14,
        reg_size: 4,
        alignment: 4,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[22,24,23,21,20,218,219,220,221,224,225,222,223],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,0,0,0,0,252,3],
        regs_size: 8,
        reg_size: 4,
        alignment: 4,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[66,67,69,70,71,72,73],
    },
    RegClassx86 {
        reg_bits: &[0,0,248,97],
        regs_size: 8,
        reg_size: 4,
        alignment: 4,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[19,22,29,23,21,20,30],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,0,0,0,0,0,0,252,3],
        regs_size: 8,
        reg_size: 4,
        alignment: 4,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[82,83,85,86,87,88,89],
    },
    RegClassx86 {
        reg_bits: &[0,0,240,97],
        regs_size: 7,
        reg_size: 4,
        alignment: 4,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[22,24,23,21,20,30],
    },
    RegClassx86 {
        reg_bits: &[0,0,248,33],
        regs_size: 7,
        reg_size: 4,
        alignment: 4,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[19,22,29,23,21,20],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,0,0,0,0,0,252,1],
        regs_size: 7,
        reg_size: 4,
        alignment: 4,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[74,75,77,78,79,80],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,0,0,0,0,0,0,248,3],
        regs_size: 7,
        reg_size: 4,
        alignment: 4,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[83,84,86,87,88,89],
    },
    RegClassx86 {
        reg_bits: &[0,0,240,33],
        regs_size: 6,
        reg_size: 4,
        alignment: 4,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[22,24,23,21,20],
    },
    RegClassx86 {
        reg_bits: &[0,0,104,1],
        regs_size: 4,
        reg_size: 4,
        alignment: 4,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[19,22,21],
    },
    RegClassx86 {
        reg_bits: &[0,0,96,1],
        regs_size: 3,
        reg_size: 4,
        alignment: 4,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[22,24],
    },
    RegClassx86 {
        reg_bits: &[0,0,72,1],
        regs_size: 3,
        reg_size: 4,
        alignment: 4,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[19,22],
    },
    RegClassx86 {
        reg_bits: &[0,0,8,1],
        regs_size: 2,
        reg_size: 4,
        alignment: 4,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[19,24],
    },
    RegClassx86 {
        reg_bits: &[0,0,64,1],
        regs_size: 2,
        reg_size: 4,
        alignment: 4,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[22,24],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,2],
        regs_size: 1,
        reg_size: 4,
        alignment: 4,
        copy_cost: -1,
        allocatable: 0,
        register_list: &[25],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,1],
        regs_size: 1,
        reg_size: 4,
        alignment: 4,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[24],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,0,0,0,0,0,252,1],
        regs_size: 7,
        reg_size: 8,
        alignment: 4,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[74,75,77,78,79,80],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,3],
        regs_size: 32,
        reg_size: 8,
        alignment: 8,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[114,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,248,27,0,0,0,0,0,0,252,3],
        regs_size: 17,
        reg_size: 8,
        alignment: 8,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[35,38,43,39,98,99,100,101,37,104,105,102,103,36,44,41],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,0,0,252,255,3],
        regs_size: 16,
        reg_size: 8,
        alignment: 8,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[50,51,53,54,55,56,57,58,59,60,61,62,63,64,65],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,3],
        regs_size: 16,
        reg_size: 8,
        alignment: 8,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[114,115,117,118,119,120,121,122,123,124,125,126,127,128,129],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,248,25,0,0,0,0,0,0,252,3],
        regs_size: 16,
        reg_size: 8,
        alignment: 8,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[35,38,43,39,98,99,100,101,37,104,105,102,103,36,44],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,248,9,0,0,0,0,0,0,252,3],
        regs_size: 15,
        reg_size: 8,
        alignment: 8,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[35,38,43,39,98,99,100,101,37,104,105,102,103],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,240,25,0,0,0,0,0,0,252,3],
        regs_size: 15,
        reg_size: 8,
        alignment: 8,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[38,40,39,98,99,100,101,37,104,105,102,103,36],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,240,9,0,0,0,0,0,0,252,3],
        regs_size: 14,
        reg_size: 8,
        alignment: 8,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[38,40,39,98,99,100,101,37,104,105,102,103,36],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,248,27],
        regs_size: 9,
        reg_size: 8,
        alignment: 8,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[35,38,43,39,37,36,44,41],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,200,11,0,0,0,0,0,0,44],
        regs_size: 9,
        reg_size: 8,
        alignment: 8,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[35,38,40,43,39,98,99,101,41],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,200,9,0,0,0,0,0,0,44],
        regs_size: 8,
        reg_size: 8,
        alignment: 8,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[35,38,40,43,39,98,99,101],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,248,25],
        regs_size: 8,
        reg_size: 8,
        alignment: 8,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[35,38,40,43,39,37,36,44],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,0,0,0,0,0,0,252,3],
        regs_size: 8,
        reg_size: 8,
        alignment: 8,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[82,83,84,85,86,87,88,89],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,0,0,0,0,0,0,0,252,3],
        regs_size: 8,
        reg_size: 8,
        alignment: 8,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[90,91,92,93,94,95,96,97],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,248,9],
        regs_size: 7,
        reg_size: 8,
        alignment: 8,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[35,38,40,43,39,37,36],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,192,9,0,0,0,0,0,0,44],
        regs_size: 7,
        reg_size: 8,
        alignment: 8,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[38,40,43,39,98,99,101],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,240,25],
        regs_size: 7,
        reg_size: 8,
        alignment: 8,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[38,40,43,39,37,36,44],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,0,0,0,0,0,0,248,3],
        regs_size: 7,
        reg_size: 8,
        alignment: 8,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[83,84,85,86,87,88,89],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,200,11],
        regs_size: 6,
        reg_size: 8,
        alignment: 8,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[35,38,40,43,39,41],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,72,1,0,0,0,0,0,0,44],
        regs_size: 6,
        reg_size: 8,
        alignment: 8,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[35,38,40,98,99,101],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,240,9],
        regs_size: 6,
        reg_size: 8,
        alignment: 8,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[38,40,43,39,37,36],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,200,9],
        regs_size: 5,
        reg_size: 8,
        alignment: 8,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[35,38,40,43,39],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,64,1,0,0,0,0,0,0,44],
        regs_size: 5,
        reg_size: 8,
        alignment: 8,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[38,40,98,99,101],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,104,1],
        regs_size: 4,
        reg_size: 8,
        alignment: 8,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[35,38,40,37],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,192,9],
        regs_size: 4,
        reg_size: 8,
        alignment: 8,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[38,40,43,39],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,96,1],
        regs_size: 3,
        reg_size: 8,
        alignment: 8,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[38,40,37],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,72,1],
        regs_size: 3,
        reg_size: 8,
        alignment: 8,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[35,38,40],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,8,1],
        regs_size: 2,
        reg_size: 8,
        alignment: 8,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[35,40],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,64,1],
        regs_size: 2,
        reg_size: 8,
        alignment: 8,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[38,40],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,0,1],
        regs_size: 1,
        reg_size: 8,
        alignment: 8,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[40],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,0,0,0,0,0,0,0,0,0,252,3],
        regs_size: 8,
        reg_size: 10,
        alignment: 4,
        copy_cost: 1,
        allocatable: 0,
        register_list: &[106,107,108,109,110,111,112,113],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,0,0,0,0,0,252,1],
        regs_size: 7,
        reg_size: 10,
        alignment: 4,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[74,75,76,77,78,79,80],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,3],
        regs_size: 32,
        reg_size: 16,
        alignment: 16,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,3],
        regs_size: 16,
        reg_size: 16,
        alignment: 16,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,3],
        regs_size: 32,
        reg_size: 32,
        alignment: 32,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,3],
        regs_size: 16,
        reg_size: 32,
        alignment: 32,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,255,255,3],
        regs_size: 32,
        reg_size: 64,
        alignment: 64,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209],
    },
    RegClassx86 {
        reg_bits: &[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,3],
        regs_size: 16,
        reg_size: 64,
        alignment: 64,
        copy_cost: 1,
        allocatable: 1,
        register_list: &[178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193],
    },
];

pub const REG_DIFFLISTSX86: [u32; 154] = [0,1,0,2,1,0,5,1,0,65522,16,1,0,65522,17,1,0,65427,1,0,65475,1,0,65520,65522,1,0,65520,65527,1,0,8,2,0,4,0,65521,8,0,9,0,13,0,65535,65519,14,0,65535,65520,14,0,65528,15,0,2,6,16,0,5,6,16,0,65535,9,16,0,2,10,16,0,3,10,16,0,3,13,16,0,4,13,16,0,65535,14,16,0,1,16,16,0,2,16,16,0,17,0,32,32,0,65221,0,65381,0,65389,0,65397,0,16,65528,65416,0,65445,0,65477,0,65504,65504,0,65509,0,120,8,65520,0,65523,0,65530,0,65531,0,65532,0,65520,65530,65534,65533,0,65534,0,65520,65523,65533,65535,0,65520,65526,65534,65535,0,65520,65520,65535,65535,0];

pub const REGSUB_DIFFLISTSX86: [u32; 15] = [4,3,1,0,4,3,1,2,0,4,3,0,6,5,0];

